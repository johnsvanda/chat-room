{"version":3,"sources":["components/Message.module.scss","components/Chat.module.scss","components/Join.module.scss","components/Messages.module.scss","components/Chat.jsx","components/Join.jsx","components/Message.jsx","components/Messages.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","socket","Join","props","useState","name","setName","chatroom","setChatroom","className","styles","container","Form","Label","Control","type","placeholder","value","onChange","e","target","onClick","preventDefault","to","Button","variant","Message","message","user","isSentByCurrentUser","trim","toLowerCase","right","outcome","outcomeUser","left","income","incomeUser","Messages","messages","viewMessages","map","index","key","Chat","location","sendMessage","setSendMessage","setMessages","useEffect","queryString","parse","search","io","connect","emit","off","on","window","replace","chat","output","input","as","rows","textarea","button","App","path","component","exact","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef4d6141.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__30f19\",\"income\":\"Message_income__2hOTt\",\"outcome\":\"Message_outcome__vRQfS\",\"incomeUser\":\"Message_incomeUser__-y8q8\",\"container\":\"Message_container__2LST5\",\"left\":\"Message_left__2E0iq\",\"right\":\"Message_right__3t0dv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"Chat_chat__355gh\",\"input\":\"Chat_input__1bR6S\",\"textarea\":\"Chat_textarea__3cW_p\",\"button\":\"Chat_button__1SFrL\",\"output\":\"Chat_output__2J7rC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Join_container__2we-f\",\"Join\":\"Join_Join__EBb1y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Messages_messages__3aQb8\"};","import React, { useState, useEffect } from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport queryString from \"query-string\";\r\nimport io from \"socket.io-client\";\r\nimport Messages from \"./Messages.jsx\";\r\nimport styles from \"./Chat.module.scss\";\r\n\r\nlet socket;\r\n\r\nconst Chat = ({ location }) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [chatroom, setChatroom] = useState(\"\");\r\n  const [sendMessage, setSendMessage] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const { name, chatroom } = queryString.parse(location.search);\r\n    socket = io.connect(\"https://chat-socket-react.herokuapp.com/\");\r\n    setName(name);\r\n    setChatroom(chatroom);\r\n\r\n    socket.emit(\"join\", { name, chatroom });\r\n\r\n    //On unmount\r\n    return () => {\r\n      socket.emit(\"disconnect\");\r\n      socket.off();\r\n    };\r\n  }, [location.search]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"error\", () => {\r\n      window.location.replace(\"/\");\r\n    });\r\n  });\r\n\r\n  useEffect(() => {\r\n    socket.on(\"chat-message\", message => {\r\n      setMessages([...messages, message]);\r\n    });\r\n  });\r\n\r\n  const handleClick = e => {\r\n    e.preventDefault();\r\n    if (sendMessage) {\r\n      socket.emit(\"chat-message\", { message: sendMessage, user: name });\r\n      setMessages([...messages, { message: sendMessage, user: name }]);\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.chat}>\r\n      <div className={styles.output}>\r\n        <h3>Welcome in chat room {chatroom}</h3>\r\n        <Messages messages={messages} name={name} />\r\n      </div>\r\n      <div className={styles.input}>\r\n        <Form.Control\r\n          as=\"textarea\"\r\n          rows=\"3\"\r\n          className={styles.textarea}\r\n          placeholder=\"Type your message...\"\r\n          value={sendMessage}\r\n          onChange={e => setSendMessage(e.target.value)}\r\n        />\r\n        <Button\r\n          variant=\"success\"\r\n          className={styles.button}\r\n          onClick={handleClick}\r\n        >\r\n          Send\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Chat;\r\n","import React, { useState } from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"./Join.module.scss\";\r\nconst Join = props => {\r\n  const [name, setName] = useState(\"\");\r\n  const [chatroom, setChatroom] = useState(\"\");\r\n\r\n  return (\r\n    <div className={styles.Join}>\r\n      <div className={styles.container}>\r\n        <h1>Join the chat room !</h1>\r\n        <Form.Label>Username</Form.Label>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"Username\"\r\n          value={name}\r\n          onChange={e => setName(e.target.value)}\r\n        />\r\n        <br />\r\n        <Form.Label>Chatroom</Form.Label>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"Chatroom you want to join\"\r\n          value={chatroom}\r\n          onChange={e => setChatroom(e.target.value)}\r\n        />\r\n        <br />\r\n        <Link\r\n          onClick={e => (!name || !chatroom ? e.preventDefault() : null)}\r\n          to={`/chat?name=${name}&chatroom=${chatroom}`}\r\n        >\r\n          <Button variant=\"success\">Join Us!</Button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Join;\r\n","import React from \"react\";\r\nimport styles from \"./Message.module.scss\";\r\nconst Message = ({ message, name, user }) => {\r\n  let isSentByCurrentUser = false;\r\n\r\n  const trimmedName = name.trim().toLowerCase();\r\n  if (user === trimmedName) {\r\n    isSentByCurrentUser = true;\r\n  }\r\n\r\n  return isSentByCurrentUser ? (\r\n    <div className={styles.right}>\r\n      <span className={styles.outcome}>\r\n        <span className={styles.outcomeUser}>me: </span>\r\n        {message}\r\n      </span>\r\n    </div>\r\n  ) : (\r\n    <div className={styles.left}>\r\n      <span className={styles.income}>\r\n        <span className={styles.incomeUser}>{user + \":\"} </span>\r\n        {message}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport Message from \"./Message.jsx\";\r\nimport styles from \"./Messages.module.scss\";\r\nconst Messages = ({ messages, name }) => {\r\n  const viewMessages = messages.map((message, index) => (\r\n    <Message\r\n      message={message.message}\r\n      user={message.user}\r\n      name={name}\r\n      key={index}\r\n    />\r\n  ));\r\n  return <div className={styles.messages}>{viewMessages}</div>;\r\n};\r\n\r\nexport default Messages;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Join from \"./components/Join.jsx\";\nimport Chat from \"./components/Chat.jsx\";\n\nconst App = () => (\n  <Router>\n    <Switch>\n      <Route path=\"/chat\" component={Chat} />\n      <Route exact path=\"/\" component={Join} />\n    </Switch>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}